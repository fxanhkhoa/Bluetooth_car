
Bluetooth_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001ba  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000013a  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000ef  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000021a  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a6  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 42 00 	call	0x84	; 0x84 <main>
  74:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z9uart_sendc>:
void speed(float left, float right, float percent)
{
	left  = left  *  ratio * (percent/100.0);
	right = right *  ratio * (percent/100.0);

	if(left >= 0)
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <_Z9uart_sendc>
  80:	8c b9       	out	0x0c, r24	; 12
  82:	08 95       	ret

00000084 <main>:
  84:	11 ba       	out	0x11, r1	; 17
  86:	10 bc       	out	0x20, r1	; 32
  88:	83 e3       	ldi	r24, 0x33	; 51
	{
		sbi(DIR0_PORT, DIR00);
  8a:	89 b9       	out	0x09, r24	; 9
		cbi(DIR0_PORT, DIR01);
  8c:	1b b8       	out	0x0b, r1	; 11
		OCR1B = left*200;
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32
  92:	88 e9       	ldi	r24, 0x98	; 152
  94:	8a b9       	out	0x0a, r24	; 10
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	78 94       	sei
  9e:	32 e0       	ldi	r19, 0x02	; 2
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	80 91 60 00 	lds	r24, 0x0060
  a6:	90 91 61 00 	lds	r25, 0x0061
	}
	else
	{
		cbi(DIR0_PORT, DIR00);
		sbi(DIR0_PORT, DIR01);
  aa:	01 97       	sbiw	r24, 0x01	; 1
		OCR1B = -left*200;
  ac:	41 f4       	brne	.+16     	; 0xbe <main+0x3a>
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	82 27       	eor	r24, r18
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	10 92 61 00 	sts	0x0061, r1
  b8:	10 92 60 00 	sts	0x0060, r1
  bc:	f2 cf       	rjmp	.-28     	; 0xa2 <main+0x1e>
  be:	80 91 60 00 	lds	r24, 0x0060
  c2:	90 91 61 00 	lds	r25, 0x0061
	}
	
	if(right >= 0)
  c6:	02 97       	sbiw	r24, 0x02	; 2
  c8:	61 f7       	brne	.-40     	; 0xa2 <main+0x1e>
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	83 27       	eor	r24, r19
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	10 92 61 00 	sts	0x0061, r1
  d4:	10 92 60 00 	sts	0x0060, r1
	{
		sbi(DIR1_PORT, DIR10);
  d8:	e4 cf       	rjmp	.-56     	; 0xa2 <main+0x1e>

000000da <__vector_11>:
		cbi(DIR1_PORT, DIR11);
  da:	1f 92       	push	r1
		OCR2 = right*255/100;
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	cf 93       	push	r28
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
  fe:	cc b1       	in	r28, 0x0c	; 12
	}
	else
	{
		cbi(DIR1_PORT, DIR10);
 100:	8c 2f       	mov	r24, r28
		sbi(DIR1_PORT, DIR11);
 102:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z9uart_sendc>
		OCR2 = -right*255/100;
 106:	c1 33       	cpi	r28, 0x31	; 49
 108:	19 f0       	breq	.+6      	; 0x110 <__vector_11+0x36>
 10a:	c2 33       	cpi	r28, 0x32	; 50
 10c:	41 f0       	breq	.+16     	; 0x11e <__vector_11+0x44>
 10e:	0d c0       	rjmp	.+26     	; 0x12a <__vector_11+0x50>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	90 93 61 00 	sts	0x0061, r25
 118:	80 93 60 00 	sts	0x0060, r24
 11c:	06 c0       	rjmp	.+12     	; 0x12a <__vector_11+0x50>
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 61 00 	sts	0x0061, r25
 126:	80 93 60 00 	sts	0x0060, r24
	}
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	cf 91       	pop	r28
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
		break;
		default:
			//PORTA ^= (1 << 2);
		break;
	};
}
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
